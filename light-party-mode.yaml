blueprint:
  name: Light Party Mode
  description: 'Create a party effect with your lights by cycling through bright saturated colors.
    
    Features:
    - Select which lights to control
    - Configurable color transition time
    - Adjustable brightness levels
    - Return to previous state or scene when turned off
    - Controlled by an input_boolean switch'
  domain: automation
  input:
    trigger_boolean:
      name: Control Switch
      description: The input_boolean that controls the party mode
      selector:
        entity:
          domain: input_boolean
    lights:
      name: Lights
      description: Select the lights you want to control
      selector:
        target:
          entity:
            domain: light
    transition_time:
      name: Color Transition Time
      description: Time in seconds between color changes (1-300)
      default: 5
      selector:
        number:
          min: 1
          max: 300
          unit_of_measurement: seconds
          mode: slider
          step: 1
    min_brightness:
      name: Minimum Brightness
      description: Minimum brightness level (1-100)
      default: 50
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: '%'
          mode: slider
          step: 1
    max_brightness:
      name: Maximum Brightness
      description: Maximum brightness level (1-100)
      default: 100
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: '%'
          mode: slider
          step: 1
    fixed_brightness:
      name: Use Fixed Brightness
      description: If enabled, lights will stay at maximum brightness
      default: false
      selector:
        boolean: {}
    return_scene:
      name: Return Scene
      description: Optional - Scene to activate when party mode is turned off (leave empty to return to previous state)
      default: null
      selector:
        entity:
          domain: scene

variables:
  fixed_brightness: !input fixed_brightness
  min_brightness: !input min_brightness
  max_brightness: !input max_brightness
  disco_colors:
    - [255, 0, 0]     # Red
    - [255, 0, 255]   # Magenta
    - [0, 0, 255]     # Blue
    - [0, 255, 255]   # Cyan
    - [0, 255, 0]     # Green
    - [255, 255, 0]   # Yellow

mode: restart
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input trigger_boolean

action:
  - variables:
      previous_states: >
        {% set result = {} %}
        {% for entity in expand('!input lights') %}
          {% set attr = state_attr(entity, 'brightness') %}
          {% set rgb = state_attr(entity, 'rgb_color') %}
          {% if attr is not none and rgb is not none %}
            {% set result = result.update({entity: {'brightness': attr, 'rgb_color': rgb}}) %}
          {% endif %}
        {% endfor %}
        {{ result }}

  - choose:
      - conditions:
          - condition: state
            entity_id: !input trigger_boolean
            state: 'on'
        sequence:
          - repeat:
              while:
                - condition: state
                  entity_id: !input trigger_boolean
                  state: 'on'
              sequence:
                - repeat:
                    count: "{{ disco_colors|length }}"
                    sequence:
                      - service: light.turn_on
                        target: !input lights
                        data:
                          rgb_color: "{{ disco_colors[repeat.index-1] }}"
                          brightness_pct: >
                            {% if fixed_brightness %}
                              {{ max_brightness }}
                            {% else %}
                              {{ range(min_brightness|int, max_brightness|int)|random }}
                            {% endif %}
                          transition: "{{ transition_time|int / 2 }}"
                      - delay:
                          seconds: !input transition_time

      - conditions:
          - condition: state
            entity_id: !input trigger_boolean
            state: 'off'
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ return_scene != None }}"
                sequence:
                  - service: scene.turn_on
                    data:
                      transition: 2
                      entity_id: "{{ return_scene }}"
            default:
              - service: light.turn_on
                target: !input lights
                data:
                  brightness: "{{ previous_states[trigger.entity_id].brightness|default(255) }}"
                  rgb_color: "{{ previous_states[trigger.entity_id].rgb_color|default([255, 255, 255]) }}"
                  transition: 2