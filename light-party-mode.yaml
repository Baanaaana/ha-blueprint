blueprint:
  name: Light Party Mode
  description: 'Create a disco-like effect with your RGB lights.
    
    Version: 0.1.3
    
    Features:
    - Select lights for color effects
    - Select lights to turn off during party mode
    - Configurable color transition and switch timing
    - Adjustable or fixed brightness levels
    - Return to multiple scenes when turned off
    - Optimized for Philips Hue lights
    
    Note: Uses only bright saturated colors for maximum effect'
  domain: automation
  input:
    trigger_boolean:
      name: Party Mode Switch
      description: Input boolean or switch that controls the party mode
      selector:
        entity:
          filter:
            - domain: input_boolean
            - domain: switch
    party_lights:
      name: Party Lights
      description: Select RGB lights that should show the color effects (make sure to only select RGB capable lights)
      selector:
        target:
          entity:
            domain: light
    off_lights:
      name: Lights to Turn Off
      description: Select lights that should turn off during party mode
      selector:
        target:
          entity:
            domain: light
      default: []
    switch_time:
      name: Color Switch Time
      description: Time between color changes (1-300 seconds)
      default: 5
      selector:
        number:
          min: 1
          max: 300
          unit_of_measurement: seconds
          mode: slider
          step: 1
    transition_time:
      name: Transition Time
      description: Time to transition between colors (0-10 seconds)
      default: 2
      selector:
        number:
          min: 0
          max: 10
          unit_of_measurement: seconds
          mode: slider
          step: 0.5
    min_brightness:
      name: Minimum Brightness
      description: Minimum brightness level (1-100)
      default: 50
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: '%'
          mode: slider
          step: 1
    max_brightness:
      name: Maximum Brightness
      description: Maximum brightness level (1-100)
      default: 100
      selector:
        number:
          min: 1
          max: 100
          unit_of_measurement: '%'
          mode: slider
          step: 1
    fixed_brightness:
      name: Fixed Brightness
      description: Set a fixed brightness level (0 to use min/max range)
      default: 0
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: '%'
          mode: slider
          step: 1
    return_scenes:
      name: Return Scenes
      description: Scenes to activate when party mode turns off (in order)
      selector:
        entity:
          domain: scene
          multiple: true

mode: restart
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input trigger_boolean

variables:
  # Input variables
  transition_time: !input transition_time
  switch_time: !input switch_time
  min_brightness: !input min_brightness
  max_brightness: !input max_brightness
  fixed_brightness: !input fixed_brightness
  # Get entity IDs for lights
  party_light_entities: "{{ expand(!input party_lights).entity_id | list }}"
  off_light_entities: "{{ expand(!input off_lights).entity_id | list }}"
  # Bright saturated colors
  party_colors:
    - [255, 0, 0]     # Red
    - [255, 0, 255]   # Magenta
    - [0, 0, 255]     # Blue
    - [0, 255, 255]   # Cyan
    - [0, 255, 0]     # Green
    - [255, 255, 0]   # Yellow
    - [255, 128, 0]   # Orange
    - [255, 0, 128]   # Pink

action:
  # Store initial states
  - service: scene.create
    data:
      scene_id: before_party
      snapshot_entities: "{{ party_light_entities | join(',') }}"

  # Turn off selected lights
  - if:
      - condition: template
        value_template: "{{ off_light_entities | length > 0 }}"
    then:
      - service: light.turn_off
        target:
          entity_id: "{{ off_light_entities }}"
        data:
          transition: 1

  # Main party sequence
  - if:
      - condition: state
        entity_id: !input trigger_boolean
        state: 'on'
    then:
      - repeat:
          sequence:
            # Assign random colors to each light
            - service: light.turn_on
              target:
                entity_id: "{{ party_light_entities }}"
              data:
                brightness_pct: >
                  {% if fixed_brightness > 0 %}
                    {{ fixed_brightness }}
                  {% else %}
                    {{ range(min_brightness|int, max_brightness|int)|random }}
                  {% endif %}
                rgb_color: "{{ party_colors[range(0, party_colors|length - 1)|random] }}"
                transition: "{{ transition_time }}"
            - delay:
                seconds: "{{ switch_time }}"
          until:
            - condition: state
              entity_id: !input trigger_boolean
              state: 'off'

  # Return to scenes or previous state
  - if:
      - condition: template
        value_template: "{{ return_scenes is not none and return_scenes|length > 0 }}"
    then:
      - repeat:
          count: "{{ return_scenes | length }}"
          sequence:
            - service: scene.turn_on
              target:
                entity_id: "{{ return_scenes[repeat.index - 1] }}"
              data:
                transition: 2
    else:
      - service: scene.turn_on
        target:
          entity_id: scene.before_party